import React, { useEffect, useState, useCallback } from 'react';
import { Button, Layout, Modal, Form, Input, message, Select, Divider } from 'antd';
import { PlusOutlined, EditOutlined, DeleteOutlined } from '@ant-design/icons';
import type { RepositoryItem, RepositoryCategory, ProjectConfig } from './types';
import { DEFAULT_CONFIG } from './types';
import { postMessage, isVSCodeApiAvailable } from './vscode-api';
import Header from './Header';
import { RepositoryCategoryComponent } from './components';
import { extractRepoInfo, copyToClipboard, parseRepositoryInput, validateRepositoryUrl } from './utils';
import { useClone } from './hooks/useClone';

const { Content } = Layout;

export default function Repositories() {
  const [config, setConfig] = useState<ProjectConfig>(DEFAULT_CONFIG);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showQuickAddModal, setShowQuickAddModal] = useState(false);
  const [selectedCategoryId, setSelectedCategoryId] = useState<string>('');
  const [loading, setLoading] = useState(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [showRenameModal, setShowRenameModal] = useState(false);
  const [renamingCategory, setRenamingCategory] = useState<{id: string, name: string} | null>(null);
  const [showCloneModal, setShowCloneModal] = useState(false);
  const [cloneRepository, setCloneRepository] = useState<{repository: RepositoryItem, cloneType: 'https' | 'ssh'} | null>(null);
  
  // ‰ΩøÁî®ÂÖãÈöÜ hook
  const { cloneState, resetCloneState } = useClone(config.addedDirectories);
  const [form] = Form.useForm();
  const [quickAddForm] = Form.useForm();
  const [renameForm] = Form.useForm();
  const [cloneForm] = Form.useForm();

  // ÊãñÊãΩÁä∂ÊÄÅÁÆ°ÁêÜ
  const [draggedRepository, setDraggedRepository] = useState<{ repositoryId: string; categoryId: string } | null>(null);
  const [dragOverCategory, setDragOverCategory] = useState<string | null>(null);
  const [dragOverRepository, setDragOverRepository] = useState<{ repositoryId: string; categoryId: string } | null>(null);

  useEffect(() => {
    const handler = (event: MessageEvent) => {
      const msg = event.data;
      
      if (msg?.type === 'configLoaded' && msg.payload) {
        // Á°Æ‰øù repositoryCategories Â≠óÊÆµÂ≠òÂú®ÔºåÂ¶ÇÊûú‰∏çÂ≠òÂú®Âàô‰ΩøÁî®ÈªòËÆ§ÂÄº
        const loadedConfig = {
          ...msg.payload,
          repositoryCategories: msg.payload.repositoryCategories || DEFAULT_CONFIG.repositoryCategories,
        };
        setConfig(loadedConfig);
      }
      
      if (msg?.type === 'directorySelected' && msg.payload) {
        // Â§ÑÁêÜÊñ∞ÁõÆÂΩïÈÄâÊã©ÁªìÊûú
        const { directory, cloneInfo } = msg.payload;
        
        console.log('[Repositories] Êî∂Âà∞ÁõÆÂΩïÈÄâÊã©Ê∂àÊÅØ:', directory);
        console.log('[Repositories] ÂΩìÂâç config Áä∂ÊÄÅ:', config);
        
        // üîë ‰ΩøÁî®ÂáΩÊï∞ÂºèÊõ¥Êñ∞ÔºåÁ°Æ‰øùÂü∫‰∫éÊúÄÊñ∞Áä∂ÊÄÅËøõË°åÊìç‰Ωú
        setConfig((currentConfig) => {
          console.log('[Repositories] Âü∫‰∫éÊúÄÊñ∞ÈÖçÁΩÆÂ§ÑÁêÜÁõÆÂΩïÈÄâÊã©:', currentConfig);
          
          // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú®Áõ∏ÂêåÁöÑÁõÆÂΩïÔºà‰ΩøÁî®Ê≠£Á°ÆÁöÑ URI Ê†ºÂºèÔºâ
          const existingDirectory = (currentConfig.addedDirectories || []).find(
            dir => {
              // ÊØîËæÉ URIÔºà‰∏ªË¶ÅÂåπÈÖçÊñπÂºèÔºâ
              if (dir.uri === directory.uri) return true;
              
              // ÊØîËæÉÂêçÁß∞ÔºàÂ§áÁî®ÂåπÈÖçÊñπÂºèÔºâ
              if (dir.name === directory.name) return true;
              
              // ÊØîËæÉÊñá‰ª∂Á≥ªÁªüË∑ØÂæÑÔºàÂ¶ÇÊûúÂèØËÉΩÁöÑËØùÔºâ
              try {
                if (directory.path && dir.uri.includes(directory.path.replace(/\\/g, '/'))) return true;
              } catch (e) {}
              
              return false;
            }
          );
          
          let targetDirectoryId: string;
          let updatedConfig: ProjectConfig;
          
          if (existingDirectory) {
            // Â¶ÇÊûúÁõÆÂΩïÂ∑≤Â≠òÂú®ÔºåÁõ¥Êé•‰ΩøÁî®Áé∞ÊúâÁöÑÁõÆÂΩïÔºà‰øùÁïôÊâÄÊúâÁé∞ÊúâÊï∞ÊçÆÔºâ
            targetDirectoryId = existingDirectory.id;
            console.log('[Repositories] ÂèëÁé∞Â∑≤Â≠òÂú®ÁõÆÂΩï:', existingDirectory);
            message.info(`ÁõÆÂΩï "${directory.name}" Â∑≤Â≠òÂú®ÔºåÂ∞Ü‰ΩøÁî®Áé∞ÊúâÁõÆÂΩï`);
            
            // ‰øùÊåÅÈÖçÁΩÆ‰∏çÂèòÔºå‰∏ç‰∏¢Â§±‰ªª‰ΩïÊï∞ÊçÆ
            updatedConfig = currentConfig;
          } else {
            // Â¶ÇÊûúÁõÆÂΩï‰∏çÂ≠òÂú®ÔºåÊ∑ªÂä†Âà∞ addedDirectories
            const newDirectory = {
              id: `dir-${Date.now()}`,
              name: directory.name,
              uri: directory.uri, // ‰ΩøÁî®Ê≠£Á°ÆÁöÑ URI Ê†ºÂºè
              subfolders: [],
              addedAt: new Date().toISOString(),
            };
            
            console.log('[Repositories] Ê∑ªÂä†Êñ∞ÁõÆÂΩï:', newDirectory);
            
            // üîë Âü∫‰∫éÂΩìÂâçÊúÄÊñ∞ÈÖçÁΩÆÂàõÂª∫Êõ¥Êñ∞ÁâàÊú¨Ôºå‰øùÁïôÊâÄÊúâÂÖ∂‰ªñÊï∞ÊçÆ
            updatedConfig = {
              ...currentConfig, // ‰øùÁïôÊâÄÊúâÁé∞ÊúâÈÖçÁΩÆ
              addedDirectories: [...(currentConfig.addedDirectories || []), newDirectory],
            };
            
            // ÂºÇÊ≠•‰øùÂ≠òÊõ¥Êñ∞ÂêéÁöÑÈÖçÁΩÆ
            postMessage({ type: 'saveConfig', payload: updatedConfig });
            
            targetDirectoryId = newDirectory.id;
            message.success(`Â∑≤Ê∑ªÂä†Êñ∞ÁõÆÂΩïÔºö${directory.name}`);
          }
          
          // ÂºÇÊ≠•Êìç‰ΩúÔºåÈÅøÂÖçÈòªÂ°ûÁä∂ÊÄÅÊõ¥Êñ∞
          setTimeout(() => {
            // Ëá™Âä®ÈÄâÊã©ÁõÆÂΩï
            cloneForm.setFieldsValue({ directoryId: targetDirectoryId });
            
            // Â¶ÇÊûúÊúâÂÖãÈöÜ‰ø°ÊÅØÔºåËá™Âä®ÂºÄÂßãÂÖãÈöÜ
            if (cloneInfo && cloneRepository) {
              // üîß Á°Æ‰øù‰ΩøÁî®Êñá‰ª∂Á≥ªÁªüË∑ØÂæÑËÄå‰∏çÊòØURI
              const targetPath = directory.path || (directory.uri ? decodeURIComponent(directory.uri.replace('file://', '')) : '');
              
              console.log('[Repositories] Auto clone target path:', targetPath);
              
              postMessage({ 
                type: 'cloneRepository', 
                payload: { 
                  url: cloneInfo.url, 
                  name: cloneRepository.repository.name,
                  cloneType: cloneInfo.cloneType,
                  targetDirectory: targetPath  // ‰ΩøÁî®Êñá‰ª∂Á≥ªÁªüË∑ØÂæÑ
                } 
              });
              
              // ‰∏çÂú®ËøôÈáåÂÖ≥Èó≠ÂØπËØùÊ°ÜÔºåÁ≠âÂæÖÂÖãÈöÜÂºÄÂßãÊ∂àÊÅØ
            }
          }, 0);
          
          return updatedConfig;
        });
      }
      
      // Â§ÑÁêÜÂÖãÈöÜÊ∂àÊÅØÁöÑÈÄªËæëÂ∑≤ÁßªÂä®Âà∞ useClone hook ‰∏≠
    };
    
    window.addEventListener('message', handler);
    
    // ËØ∑Ê±ÇÂä†ËΩΩÈÖçÁΩÆ
    try {
      postMessage({ type: 'loadConfig' });
    } catch (e) {
      console.warn('[Repositories] failed to send loadConfig', e);
    }
    
    return () => window.removeEventListener('message', handler);
  }, []); // ‰øùÊåÅÁ©∫‰æùËµñÊï∞ÁªÑÔºåÈÅøÂÖçÈ¢ëÁπÅÈáçÊñ∞ËÆæÁΩÆ‰∫ã‰ª∂ÁõëÂê¨Âô®

  // ÊãñÊãΩÂ§ÑÁêÜÂáΩÊï∞
  const handleRepositoryDragStart = (repositoryId: string, categoryId: string) => {
    setDraggedRepository({ repositoryId, categoryId });
  };

  const handleRepositoryDragEnd = () => {
    setDraggedRepository(null);
    setDragOverCategory(null);
    setDragOverRepository(null);
  };

  const handleCategoryDragOver = (e: React.DragEvent, categoryId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverCategory(categoryId);
  };

  const handleCategoryDragLeave = (e: React.DragEvent) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX;
    const y = e.clientY;
    
    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
      setDragOverCategory(null);
    }
  };

  const handleCategoryDrop = (e: React.DragEvent, toCategoryId: string) => {
    e.preventDefault();
    setDragOverCategory(null);

    if (!draggedRepository || draggedRepository.categoryId === toCategoryId) {
      setDraggedRepository(null);
      setDragOverRepository(null);
      return;
    }

    handleMoveRepository(draggedRepository.repositoryId, draggedRepository.categoryId, toCategoryId, 0);
    
    setDraggedRepository(null);
    setDragOverRepository(null);
  };

  const handleRepositoryDragOver = (e: React.DragEvent, repositoryId: string, categoryId: string) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
    setDragOverRepository({ repositoryId, categoryId });
  };

  const handleRepositoryDragLeave = (e: React.DragEvent) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const x = e.clientX;
    const y = e.clientY;
    
    if (x < rect.left || x > rect.right || y < rect.top || y > rect.bottom) {
      setDragOverRepository(null);
    }
  };

  const handleRepositoryDrop = (e: React.DragEvent, targetRepositoryId: string, targetCategoryId: string) => {
    e.preventDefault();
    setDragOverRepository(null);

    if (!draggedRepository || draggedRepository.repositoryId === targetRepositoryId) {
      setDraggedRepository(null);
      setDragOverCategory(null);
      return;
    }

    const targetCategory = (config.repositoryCategories || []).find(cat => cat.id === targetCategoryId);
    if (!targetCategory) {
      setDraggedRepository(null);
      setDragOverCategory(null);
      return;
    }

    const targetIndex = targetCategory.repositories.findIndex(r => r.id === targetRepositoryId);
    
    if (draggedRepository.categoryId === targetCategoryId) {
      const sourceIndex = targetCategory.repositories.findIndex(r => r.id === draggedRepository.repositoryId);
      if (sourceIndex !== -1 && targetIndex !== -1) {
        const newRepositories = [...targetCategory.repositories];
        const [movedRepository] = newRepositories.splice(sourceIndex, 1);
        newRepositories.splice(targetIndex, 0, movedRepository);
        handleReorderRepositories(targetCategoryId, newRepositories);
      }
    } else {
      handleMoveRepository(draggedRepository.repositoryId, draggedRepository.categoryId, targetCategoryId, targetIndex);
    }
    
    setDraggedRepository(null);
    setDragOverCategory(null);
  };

  const handleAddRepository = () => {
    setShowAddModal(true);
  };

  const handleCancelAdd = () => {
    setShowAddModal(false);
    setLoading(false);
    setNewCategoryName('');
    form.resetFields();
  };

  // Â§ÑÁêÜÊñ∞ÂàÜÁ±ªÂêçÁß∞ËæìÂÖ•
  const handleNewCategoryChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewCategoryName(e.target.value);
  };

  // Â§ÑÁêÜÂõûËΩ¶ÂàõÂª∫Êñ∞ÂàÜÁ±ª
  const handleCreateNewCategory = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && newCategoryName.trim()) {
      e.preventDefault();
      
      const newCategory = {
        id: `category-${Date.now()}`,
        name: newCategoryName.trim(),
        collapsed: false,
        repositories: [],
        createdAt: new Date().toISOString(),
      };
      

      const defaultCategories = (config.repositoryCategories || [])
        .filter(category => category.name === 'Êú™ÂàÜÁ±ª' || category.id === 'default-repo');
      const otherCategories = (config.repositoryCategories || [])
        .filter(category => category.name !== 'Êú™ÂàÜÁ±ª' && category.id !== 'default-repo');
      
      const updatedConfig = {
        ...config,
        repositoryCategories: [...defaultCategories, newCategory, ...otherCategories],
      };
      
      setConfig(updatedConfig);
      postMessage({ type: 'saveConfig', payload: updatedConfig });
      
      setTimeout(() => {
        form.setFieldsValue({ categoryId: newCategory.id });
        form.getFieldInstance('categoryId')?.blur();
        form.getFieldInstance('categoryId')?.focus();
      }, 0);
      
      setNewCategoryName('');
    }
  };

  const handleSubmitAdd = async (values: { url: string; categoryId?: string }) => {
    setLoading(true);
    try {
      let { url, categoryId } = values;
      
      // Á°Æ‰øù URL ÊúâÂçèËÆÆ
      if (!url.startsWith('http://') && !url.startsWith('https://')) {
        url = 'https://' + url;
      }

      // È™åËØÅ URL Ê†ºÂºè
      new URL(url);

      // ÊèêÂèñ‰ªìÂ∫ì‰ø°ÊÅØ
      const { name, provider, cloneUrls } = extractRepoInfo(url);

      // ‰ΩøÁî®ÈªòËÆ§ÂàÜÁ±ªÂ¶ÇÊûúÊ≤°ÊúâÊåáÂÆö
      let targetCategoryId = categoryId;
      if (!targetCategoryId) {
        const defaultCategory = (config.repositoryCategories || []).find(cat => cat.name === 'Êú™ÂàÜÁ±ª');
        targetCategoryId = defaultCategory?.id || 'default-repo';
      }

      const newRepository: RepositoryItem = {
        id: Date.now().toString(),
        name,
        url,
        provider,
        cloneUrls,
        addedAt: new Date().toISOString(),
      };

      const updatedCategories = (config.repositoryCategories || []).map(category => 
        category.id === targetCategoryId 
          ? { ...category, repositories: [...category.repositories, newRepository] }
          : category
      );

      const updatedConfig = {
        ...config,
        repositoryCategories: updatedCategories,
      };

      setConfig(updatedConfig);
      postMessage({ type: 'saveConfig', payload: updatedConfig });
      
      message.success('‰ªìÂ∫ìÊ∑ªÂä†ÊàêÂäü');
      setShowAddModal(false);
      form.resetFields();
    } catch (error) {
      console.error('Error adding repository:', error);
      message.error('Ê∑ªÂä†‰ªìÂ∫ìÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü• URL Ê†ºÂºè');
      setShowAddModal(false);
      form.resetFields();
    } finally {
      setLoading(false);
    }
  };

  const handleDeleteRepository = (categoryId: string, repoId: string) => {
    const updatedCategories = (config.repositoryCategories || []).map(category => 
      category.id === categoryId 
        ? { ...category, repositories: category.repositories.filter(repo => repo.id !== repoId) }
        : category
    );

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
    message.success('‰ªìÂ∫ìÂà†Èô§ÊàêÂäü');
  };

  const handleOpenRepository = (url: string) => {
    if (!isVSCodeApiAvailable()) {
      console.warn('VS Code API ‰∏çÂèØÁî®');
      message.warning('VS Code API ‰∏çÂèØÁî®ÔºåËØ∑Á°Æ‰øùÂú® VS Code Êâ©Â±ïÁéØÂ¢É‰∏≠ËøêË°å');
      return;
    }
    
    // Âú®ÈªòËÆ§ÊµèËßàÂô®‰∏≠ÊâìÂºÄÈìæÊé•
    postMessage({ type: 'openUrl', payload: { url } });
  };

  const handleReparseRepository = (repository: RepositoryItem) => {
    console.log('[Repositories] Reparsing repository:', repository);
    const { name, provider, cloneUrls } = extractRepoInfo(repository.url);
    
    const updatedCategories = (config.repositoryCategories || []).map(category => ({
      ...category,
      repositories: category.repositories.map(repo => 
        repo.id === repository.id 
          ? { ...repo, name, provider, cloneUrls }
          : repo
      )
    }));

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
    message.success('‰ªìÂ∫ìÈáçÊñ∞Ëß£ÊûêÊàêÂäü');
  };

  const handleCopyUrl = async (url: string) => {
    const success = await copyToClipboard(url);
    if (success) {
      message.success('URL Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
    } else {
      message.error('Â§çÂà∂Â§±Ë¥•ÔºåËØ∑ÊâãÂä®Â§çÂà∂');
    }
  };

  const handleCloneRepository = async (repository: RepositoryItem, cloneType: 'https' | 'ssh') => {
    // Èò≤Ê≠¢ÈáçÂ§çÂÖãÈöÜ
    if (cloneState.isCloning) {
      message.warning('Ê≠£Âú®ËøõË°åÂÖãÈöÜÊìç‰ΩúÔºåËØ∑Á®çÂÄô...');
      return;
    }
    
    const cloneUrl = repository.cloneUrls?.[cloneType];
    if (!cloneUrl) {
      message.error(`Êó†Ê≥ïËé∑Âèñ ${cloneType.toUpperCase()} ÂÖãÈöÜÂú∞ÂùÄ`);
      return;
    }

    // ËÆæÁΩÆË¶ÅÂÖãÈöÜÁöÑ‰ªìÂ∫ì‰ø°ÊÅØÂπ∂ÊâìÂºÄÁõÆÂΩïÈÄâÊã©Ê®°ÊÄÅÊ°Ü
    setCloneRepository({ repository, cloneType });
    setShowCloneModal(true);
  };

  const handleCancelClone = () => {
    setShowCloneModal(false);
    setCloneRepository(null);
    resetCloneState(); // ÂèñÊ∂àÊó∂Ê∏ÖÈô§ÂÖãÈöÜÁä∂ÊÄÅ
    cloneForm.resetFields();
  };

  const handleSelectNewDirectory = () => {
    if (!cloneRepository) return;
    
    // ÂèëÈÄÅÊ∂àÊÅØÂà∞Êâ©Â±ïÁ´ØÈÄâÊã©Êñ∞ÁõÆÂΩï
    postMessage({ 
      type: 'selectDirectory',
      payload: {
        purpose: 'addToDirectories', // Ê†áËÆ∞ËøôÊòØ‰∏∫‰∫ÜÊ∑ªÂä†Âà∞ addedDirectories
        repositoryName: cloneRepository.repository.name,
        cloneInfo: {
          url: cloneRepository.repository.cloneUrls?.[cloneRepository.cloneType],
          cloneType: cloneRepository.cloneType
        }
      } 
    });
  };

  const handleSubmitClone = async (values: { directoryId?: string }) => {
    if (!cloneRepository) return;

    const { repository, cloneType } = cloneRepository;
    const cloneUrl = repository.cloneUrls?.[cloneType];
    
    if (!cloneUrl) {
      message.error(`Êó†Ê≥ïËé∑Âèñ ${cloneType.toUpperCase()} ÂÖãÈöÜÂú∞ÂùÄ`);
      return;
    }

    if (values.directoryId) {
      // Áî®Êà∑ÈÄâÊã©‰∫ÜÂ∑≤ÊúâÁõÆÂΩï
      const selectedDirectory = (config.addedDirectories || []).find(dir => dir.id === values.directoryId);
      if (selectedDirectory) {
        // üîß Â∞ÜURIÊ†ºÂºèËΩ¨Êç¢‰∏∫Êñá‰ª∂Á≥ªÁªüË∑ØÂæÑ
        let targetPath = selectedDirectory.uri;
        if (targetPath.startsWith('file://')) {
          // ÁßªÈô§ file:// ÂâçÁºÄÂπ∂Ëß£Á†ÅURI
          targetPath = decodeURIComponent(targetPath.replace('file://', ''));
        }
        
        console.log('[Repositories] Clone target URI:', selectedDirectory.uri);
        console.log('[Repositories] Clone target path:', targetPath);
        
        // Á´ãÂç≥ÂÖ≥Èó≠ÂºπÁ™óÔºåËÆ©ÂÖãÈöÜÂú®ÂêéÂè∞ËøõË°å
        setShowCloneModal(false);
        setCloneRepository(null);
        cloneForm.resetFields();
        
        // ÂêØÂä®ÂÖãÈöÜÔºàÂêéÂè∞ËøõË°åÔºâ
        postMessage({ 
          type: 'cloneRepository', 
          payload: { 
            url: cloneUrl, 
            name: repository.name,
            cloneType,
            targetDirectory: targetPath  // ‰º†ÈÄíÊñá‰ª∂Á≥ªÁªüË∑ØÂæÑ
          } 
        });
      } else {
        message.error('ÈÄâÊã©ÁöÑÁõÆÂΩï‰∏çÂ≠òÂú®');
      }
    } else {
      message.error('ËØ∑ÂÖàÈÄâÊã©‰∏Ä‰∏™ÁõÆÂΩï');
    }
  };

  // Â§ÑÁêÜÂàÜÁ±ªÊäòÂè†/Â±ïÂºÄ
  const handleToggleCollapse = (categoryId: string) => {
    const updatedCategories = (config.repositoryCategories || []).map(category =>
      category.id === categoryId 
        ? { ...category, collapsed: !category.collapsed }
        : category
    );

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
  };

  // Â§ÑÁêÜÂàÜÁ±ªÂÜÖ‰ªìÂ∫ìÈáçÊéíÂ∫è
  const handleReorderRepositories = (categoryId: string, newRepositories: RepositoryItem[]) => {
    const updatedCategories = (config.repositoryCategories || []).map(category =>
      category.id === categoryId 
        ? { ...category, repositories: newRepositories }
        : category
    );

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
  };

  // Â§ÑÁêÜ‰ªìÂ∫ìË∑®ÂàÜÁ±ªÁßªÂä®
  const handleMoveRepository = (repositoryId: string, fromCategoryId: string, toCategoryId: string, toIndex: number) => {
    if (fromCategoryId === toCategoryId) return;

    const fromCategory = (config.repositoryCategories || []).find(cat => cat.id === fromCategoryId);
    const repository = fromCategory?.repositories.find(r => r.id === repositoryId);
    
    if (!repository || !fromCategory) return;

    const updatedCategories = (config.repositoryCategories || []).map(category => {
      if (category.id === fromCategoryId) {
        return {
          ...category,
          repositories: category.repositories.filter(r => r.id !== repositoryId),
        };
      } else if (category.id === toCategoryId) {
        const newRepositories = [...category.repositories];
        newRepositories.splice(toIndex, 0, repository);
        return {
          ...category,
          repositories: newRepositories,
        };
      }
      return category;
    });

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
    message.success(`‰ªìÂ∫ìÂ∑≤ÁßªÂä®Âà∞"${(config.repositoryCategories || []).find(cat => cat.id === toCategoryId)?.name}"`);
  };

  // Â§ÑÁêÜÂø´ÈÄüÊ∑ªÂä†‰ªìÂ∫ìÂà∞ÊåáÂÆöÂàÜÁ±ª
  const handleQuickAdd = (categoryId: string) => {
    setSelectedCategoryId(categoryId);
    setShowQuickAddModal(true);
  };

  // Â§ÑÁêÜÈáçÂëΩÂêçÂàÜÁ±ª
  const handleRenameCategory = (categoryId: string, currentName: string) => {
    setRenamingCategory({ id: categoryId, name: currentName });
    setShowRenameModal(true);
    renameForm.setFieldsValue({ categoryName: currentName });
  };

  // Â§ÑÁêÜÂà†Èô§ÂàÜÁ±ª
  const handleDeleteCategory = (categoryId: string) => {
    const categoryToDelete = (config.repositoryCategories || []).find(cat => cat.id === categoryId);
    if (!categoryToDelete) return;

    if (categoryToDelete.repositories.length > 0) {
      Modal.confirm({
        title: 'Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂàÜÁ±ªÂêóÔºü',
        content: `ÂàÜÁ±ª"${categoryToDelete.name}"‰∏≠ËøòÊúâ ${categoryToDelete.repositories.length} ‰∏™‰ªìÂ∫ìÔºåÂà†Èô§ÂêéÂ∞ÜÊó†Ê≥ïÊÅ¢Â§ç„ÄÇ`,
        okText: 'Á°ÆÂÆöÂà†Èô§',
        cancelText: 'ÂèñÊ∂à',
        okType: 'danger',
        onOk: () => {
          performDeleteCategory(categoryId);
        },
      });
    } else {
      performDeleteCategory(categoryId);
    }
  };

  // ÊâßË°åÂà†Èô§ÂàÜÁ±ªÊìç‰Ωú
  const performDeleteCategory = (categoryId: string) => {
    const updatedCategories = (config.repositoryCategories || []).filter(category => category.id !== categoryId);
    
    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
    message.success('ÂàÜÁ±ªÂà†Èô§ÊàêÂäü');
  };

  const handleCancelQuickAdd = () => {
    setShowQuickAddModal(false);
    setSelectedCategoryId('');
    quickAddForm.resetFields();
  };

  const handleCancelRename = () => {
    setShowRenameModal(false);
    setRenamingCategory(null);
    renameForm.resetFields();
  };

  const handleSubmitRename = async (values: { categoryName: string }) => {
    if (!renamingCategory) return;

    const newName = values.categoryName.trim();
    if (!newName) {
      message.error('ÂàÜÁ±ªÂêçÁß∞‰∏çËÉΩ‰∏∫Á©∫');
      return;
    }

    const existingCategory = (config.repositoryCategories || []).find(
      cat => cat.name === newName && cat.id !== renamingCategory.id
    );
    if (existingCategory) {
      message.error('ÂàÜÁ±ªÂêçÁß∞Â∑≤Â≠òÂú®');
      return;
    }

    const updatedCategories = (config.repositoryCategories || []).map(category =>
      category.id === renamingCategory.id 
        ? { ...category, name: newName }
        : category
    );

    const updatedConfig = {
      ...config,
      repositoryCategories: updatedCategories,
    };

    setConfig(updatedConfig);
    postMessage({ type: 'saveConfig', payload: updatedConfig });
    message.success('ÂàÜÁ±ªÈáçÂëΩÂêçÊàêÂäü');
    
    handleCancelRename();
  };

  const handleSubmitQuickAdd = async (values: { url: string }) => {
    setLoading(true);
    try {
      let { url } = values;
      
      if (!url.startsWith('http://') && !url.startsWith('https://')) {
        url = 'https://' + url;
      }

      new URL(url);

      const { name, provider, cloneUrls } = extractRepoInfo(url);

      const newRepository: RepositoryItem = {
        id: Date.now().toString(),
        name,
        url,
        provider,
        cloneUrls,
        addedAt: new Date().toISOString(),
      };

      const updatedCategories = (config.repositoryCategories || []).map(category => 
        category.id === selectedCategoryId 
          ? { ...category, repositories: [...category.repositories, newRepository] }
          : category
      );

      const updatedConfig = {
        ...config,
        repositoryCategories: updatedCategories,
      };

      setConfig(updatedConfig);
      postMessage({ type: 'saveConfig', payload: updatedConfig });
      
      message.success('‰ªìÂ∫ìÊ∑ªÂä†ÊàêÂäü');
      setShowQuickAddModal(false);
      quickAddForm.resetFields();
    } catch (error) {
      console.error('Error processing URL:', error);
      message.error('URL Ê†ºÂºèÊó†Êïà');
    } finally {
      setLoading(false);
    }
  };

  const totalRepositories = (config.repositoryCategories || []).reduce((sum, category) => sum + category.repositories.length, 0);
  

  return (
    <Layout style={{ minHeight: '100vh', backgroundColor: 'var(--vscode-sideBar-background)' }}>
      <style>{`
        .drag-item-being-dragged {
          opacity: 0.5 !important;
        }
        
        .drag-item-drop-target {
          background-color: var(--vscode-list-hoverBackground) !important;
          border: 2px dashed var(--vscode-focusBorder) !important;
          border-radius: 6px !important;
          transition: none !important;
        }
        
        .drag-item-being-dragged .ant-collapse-content,
        .drag-item-being-dragged .ant-collapse-header {
          opacity: 0.5 !important;
        }
        
        .drag-item-drop-target .ant-collapse-content,
        .drag-item-drop-target .ant-collapse-header {
          background-color: var(--vscode-list-hoverBackground) !important;
        }
        
        .bookmark-item-being-dragged {
          opacity: 0.5 !important;
        }
        
        .bookmark-item-drop-target {
          background-color: var(--vscode-list-hoverBackground) !important;
          border: 2px dashed var(--vscode-focusBorder) !important;
          border-radius: 4px !important;
          transition: none !important;
        }
      `}</style>
      <Header onRepoAdd={handleAddRepository} />
      
      <Content style={{ padding: '8px' }}>
        <div style={{ marginBottom: '6px' }}>
          <h3 style={{ 
            color: 'var(--vscode-foreground)', 
            fontSize: '14px',
            fontWeight: 500,
          }}>
            ‰ªìÂ∫ì ({totalRepositories})
          </h3>
        </div>

        {(config.repositoryCategories || []).length > 0 ? (
          <>
            {/* Ê∏≤Êüì"Êú™ÂàÜÁ±ª"ÂàÜÁ±ªÔºåÊÄªÊòØÂú®ÊúÄ‰∏äÊñπ */}
            {(config.repositoryCategories || [])
              .filter(category => category.name === 'Êú™ÂàÜÁ±ª' || category.id === 'default-repo')
              .map((category) => (
                <RepositoryCategoryComponent
                  key={category.id}
                  category={category}
                  onToggleCollapse={handleToggleCollapse}
                  onDeleteRepository={handleDeleteRepository}
                  onReparseRepository={handleReparseRepository}
                  onCopyUrl={handleCopyUrl}
                  onOpenRepository={handleOpenRepository}
                  onReorderRepositories={handleReorderRepositories}
                  onQuickAdd={handleQuickAdd}
                  onDeleteCategory={handleDeleteCategory}
                  onRenameCategory={handleRenameCategory}
                  onMoveRepository={handleMoveRepository}
                  onCloneRepository={handleCloneRepository}
                  draggedRepository={draggedRepository}
                  dragOverCategory={dragOverCategory}
                  dragOverRepository={dragOverRepository}
                  onRepositoryDragStart={handleRepositoryDragStart}
                  onRepositoryDragEnd={handleRepositoryDragEnd}
                  onCategoryDragOver={handleCategoryDragOver}
                  onCategoryDragLeave={handleCategoryDragLeave}
                  onCategoryDrop={handleCategoryDrop}
                  onRepositoryDragOver={handleRepositoryDragOver}
                  onRepositoryDragLeave={handleRepositoryDragLeave}
                  onRepositoryDrop={handleRepositoryDrop}
                />
              ))}
            
            {/* Ê∏≤ÊüìÂÖ∂‰ªñÂàÜÁ±ªÔºåÊîØÊåÅÊãñÊãΩÊéíÂ∫è */}
            {(config.repositoryCategories || [])
              .filter(category => category.name !== 'Êú™ÂàÜÁ±ª' && category.id !== 'default-repo')
              .map((category) => (
                <RepositoryCategoryComponent
                  key={category.id}
                  category={category}
                  onToggleCollapse={handleToggleCollapse}
                  onDeleteRepository={handleDeleteRepository}
                  onReparseRepository={handleReparseRepository}
                  onCopyUrl={handleCopyUrl}
                  onOpenRepository={handleOpenRepository}
                  onReorderRepositories={handleReorderRepositories}
                  onQuickAdd={handleQuickAdd}
                  onDeleteCategory={handleDeleteCategory}
                  onRenameCategory={handleRenameCategory}
                  onMoveRepository={handleMoveRepository}
                  onCloneRepository={handleCloneRepository}
                  draggedRepository={draggedRepository}
                  dragOverCategory={dragOverCategory}
                  dragOverRepository={dragOverRepository}
                  onRepositoryDragStart={handleRepositoryDragStart}
                  onRepositoryDragEnd={handleRepositoryDragEnd}
                  onCategoryDragOver={handleCategoryDragOver}
                  onCategoryDragLeave={handleCategoryDragLeave}
                  onCategoryDrop={handleCategoryDrop}
                  onRepositoryDragOver={handleRepositoryDragOver}
                  onRepositoryDragLeave={handleRepositoryDragLeave}
                  onRepositoryDrop={handleRepositoryDrop}
                />
              ))}
          </>
        ) : (
          <div style={{ 
            color: 'var(--vscode-descriptionForeground)', 
            fontSize: '12px',
            padding: '10px 0',
            textAlign: 'center',
          }}>
            ÊöÇÊó†‰ªìÂ∫ìÔºåÁÇπÂáªÂè≥‰∏äËßí + Âè∑Ê∑ªÂä†
          </div>
        )}
      </Content>

      {/* Ê∑ªÂä†‰ªìÂ∫ìÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title="Ê∑ªÂä†‰ªìÂ∫ì"
        open={showAddModal}
        onCancel={handleCancelAdd}
        footer={null}
        width={380}
        style={{ top: 40 }}
        styles={{
          mask: {
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
          },
        }}
        closeIcon={
          <span style={{ 
            color: 'var(--vscode-foreground)',
            fontSize: '14px',
            lineHeight: '1',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            height: '100%',
          }}>
            ‚úï
          </span>
        }
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmitAdd}
          style={{ margin: 0 }}
        >
          <Form.Item
            label={<span style={{ fontSize: '12px', color: 'var(--vscode-foreground)' }}>‰ªìÂ∫ìÂú∞ÂùÄ</span>}
            name="url"
            rules={[
              { required: true, message: 'ËØ∑ËæìÂÖ•‰ªìÂ∫ìÂú∞ÂùÄ' },
              { type: 'url', message: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ‰ªìÂ∫ìÂú∞ÂùÄ' },
            ]}
            style={{ marginBottom: '12px' }}
          >
            <Input
              placeholder="https://github.com/username/repository"
              style={{ fontSize: '12px', height: '28px' }}
            />
          </Form.Item>

          <Form.Item
            label={<span style={{ fontSize: '12px', color: 'var(--vscode-foreground)' }}>ÈÄâÊã©ÂàÜÁ±ª</span>}
            name="categoryId"
            style={{ marginBottom: '12px' }}
          >
            <Select
              placeholder="ÈÄâÊã©Áé∞ÊúâÂàÜÁ±ª"
              allowClear
              style={{ fontSize: '12px' }}
              popupRender={(menu) => (
                <>
                  <div style={{ padding: '6px 8px', borderBottom: '1px solid var(--vscode-menu-separatorBackground)', marginBottom: '6px' }}>
                    <Input
                      placeholder="ËæìÂÖ•Êñ∞ÂàÜÁ±ªÂêçÁß∞ÔºåÊåâÂõûËΩ¶ÂàõÂª∫"
                      value={newCategoryName}
                      onChange={handleNewCategoryChange}
                      onKeyDown={handleCreateNewCategory}
                      style={{ fontSize: '12px', height: '26px' }}
                      prefix={<PlusOutlined style={{ fontSize: '10px', color: 'var(--vscode-descriptionForeground)' }} />}
                    />
                  </div>
                  {menu}
                </>
              )}
            >
              {(config.repositoryCategories || []).map(category => (
                <Select.Option key={category.id} value={category.id}>
                  {category.name} ({category.repositories.length})
                </Select.Option>
              ))}
            </Select>
          </Form.Item>

          <div style={{ display: 'flex', gap: '6px', justifyContent: 'flex-end', marginTop: '8px' }}>
            <Button
              onClick={handleCancelAdd}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              ÂèñÊ∂à
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              {loading ? 'Ê∑ªÂä†‰∏≠...' : 'Ê∑ªÂä†'}
            </Button>
          </div>
        </Form>
      </Modal>

      {/* Âø´ÈÄüÊ∑ªÂä†‰ªìÂ∫ìÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title="Ê∑ªÂä†‰ªìÂ∫ìÂà∞ÂàÜÁ±ª"
        open={showQuickAddModal}
        onCancel={handleCancelQuickAdd}
        footer={null}
        width={380}
        style={{ top: 40 }}
        styles={{
          mask: {
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
          },
        }}
        closeIcon={
          <span style={{ 
            color: 'var(--vscode-foreground)',
            fontSize: '14px',
            lineHeight: '1',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            height: '100%',
          }}>
            ‚úï
          </span>
        }
      >
        <Form
          form={quickAddForm}
          layout="vertical"
          onFinish={handleSubmitQuickAdd}
          style={{ margin: 0 }}
        >
          <div style={{ 
            marginBottom: '12px', 
            padding: '6px 10px', 
            backgroundColor: 'var(--vscode-list-hoverBackground)',
            borderRadius: '3px',
            fontSize: '12px',
            color: 'var(--vscode-foreground)',
            border: '1px solid var(--vscode-panel-border)',
          }}>
            ÂàÜÁ±ª: {(config.repositoryCategories || []).find(cat => cat.id === selectedCategoryId)?.name || ''}
          </div>

          <Form.Item
            label={<span style={{ fontSize: '12px', color: 'var(--vscode-foreground)' }}>‰ªìÂ∫ìÂú∞ÂùÄ</span>}
            name="url"
            rules={[
              { required: true, message: 'ËØ∑ËæìÂÖ•‰ªìÂ∫ìÂú∞ÂùÄ' },
              { type: 'url', message: 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ‰ªìÂ∫ìÂú∞ÂùÄ' },
            ]}
            style={{ marginBottom: '12px' }}
          >
            <Input
              placeholder="https://github.com/username/repository"
              style={{ fontSize: '12px', height: '28px' }}
            />
          </Form.Item>

          <div style={{ display: 'flex', gap: '6px', justifyContent: 'flex-end', marginTop: '8px' }}>
            <Button
              onClick={handleCancelQuickAdd}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              ÂèñÊ∂à
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={loading}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              {loading ? 'Ê∑ªÂä†‰∏≠...' : 'Ê∑ªÂä†'}
            </Button>
          </div>
        </Form>
      </Modal>

      {/* ÈáçÂëΩÂêçÂàÜÁ±ªÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title="ÈáçÂëΩÂêçÂàÜÁ±ª"
        open={showRenameModal}
        onCancel={handleCancelRename}
        footer={null}
        width={300}
        style={{ top: 40 }}
        styles={{
          mask: {
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
          },
        }}
        closeIcon={
          <span style={{ 
            color: 'var(--vscode-foreground)',
            fontSize: '14px',
            lineHeight: '1',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            height: '100%',
          }}>
            ‚úï
          </span>
        }
      >
        <Form
          form={renameForm}
          layout="vertical"
          onFinish={handleSubmitRename}
          style={{ margin: 0 }}
        >
          <Form.Item
            label={<span style={{ fontSize: '12px', color: 'var(--vscode-foreground)' }}>ÂàÜÁ±ªÂêçÁß∞</span>}
            name="categoryName"
            rules={[
              { required: true, message: 'ËØ∑ËæìÂÖ•ÂàÜÁ±ªÂêçÁß∞' },
              { max: 50, message: 'ÂàÜÁ±ªÂêçÁß∞ÊúÄÂ§ö50‰∏™Â≠óÁ¨¶' },
            ]}
            style={{ marginBottom: '12px' }}
          >
            <Input
              placeholder="ËæìÂÖ•ÂàÜÁ±ªÂêçÁß∞"
              style={{ fontSize: '12px', height: '28px' }}
              autoFocus
            />
          </Form.Item>

          <div style={{ display: 'flex', gap: '6px', justifyContent: 'flex-end', marginTop: '8px' }}>
            <Button
              onClick={handleCancelRename}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              ÂèñÊ∂à
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              Á°ÆÂÆö
            </Button>
          </div>
        </Form>
      </Modal>

      {/* ÂÖãÈöÜ‰ªìÂ∫ìÁõÆÂΩïÈÄâÊã©Ê®°ÊÄÅÊ°Ü */}
      <Modal
        title={`ÂÖãÈöÜ‰ªìÂ∫ì - ${cloneRepository?.repository.name || ''}`}
        open={showCloneModal}
        onCancel={handleCancelClone}
        footer={null}
        width={400}
        style={{ top: 40 }}
        styles={{
          mask: {
            backgroundColor: 'rgba(0, 0, 0, 0.6)',
          },
        }}
        closeIcon={
          <span style={{ 
            color: 'var(--vscode-foreground)',
            fontSize: '14px',
            lineHeight: '1',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            width: '100%',
            height: '100%',
          }}>
            ‚úï
          </span>
        }
      >
        <Form
          form={cloneForm}
          layout="vertical"
          onFinish={handleSubmitClone}
          style={{ margin: 0 }}
        >
          <div style={{ 
            marginBottom: '16px', 
            padding: '8px 12px', 
            backgroundColor: 'var(--vscode-list-hoverBackground)',
            borderRadius: '4px',
            fontSize: '12px',
            color: 'var(--vscode-foreground)',
            border: '1px solid var(--vscode-panel-border)',
          }}>
            <div style={{ marginBottom: '4px' }}>
              <strong>‰ªìÂ∫ì:</strong> {cloneRepository?.repository.name}
            </div>
            <div>
              <strong>ÂçèËÆÆ:</strong> {cloneRepository?.cloneType.toUpperCase()}
            </div>
          </div>

          {(config.addedDirectories || []).length > 0 ? (
            <Form.Item
              label={<span style={{ fontSize: '12px', color: 'var(--vscode-foreground)' }}>ÈÄâÊã©ÁõÆÊ†áÁõÆÂΩï</span>}
              name="directoryId"
              style={{ marginBottom: '12px' }}
            >
              <Select
                placeholder="ÈÄâÊã©Â∑≤ÊúâÁöÑÁà∂ÁõÆÂΩï"
                style={{ fontSize: '12px' }}
                allowClear
              >
                {(config.addedDirectories || []).map(directory => (
                  <Select.Option key={directory.id} value={directory.id}>
                    {directory.name}
                  </Select.Option>
                ))}
              </Select>
            </Form.Item>
          ) : (
            <div style={{
              padding: '12px',
              textAlign: 'center',
              color: 'var(--vscode-descriptionForeground)',
              fontSize: '12px',
              backgroundColor: 'var(--vscode-list-hoverBackground)',
              borderRadius: '4px',
              marginBottom: '12px',
            }}>
              ÊöÇÊó†Â∑≤Ê∑ªÂä†ÁöÑÁõÆÂΩïÔºåËØ∑ÈÄâÊã©Êñ∞ÁõÆÂΩï
            </div>
          )}

          <div style={{ 
            borderTop: '1px solid var(--vscode-panel-border)', 
            paddingTop: '12px',
            marginTop: '8px'
          }}>
            <Button
              type="default"
              onClick={handleSelectNewDirectory}
              style={{ 
                fontSize: '12px', 
                height: '28px', 
                width: '100%',
                marginBottom: '16px'
              }}
            >
              ÈÄâÊã©Êñ∞ÁõÆÂΩï
            </Button>
          </div>

          <div style={{ display: 'flex', gap: '6px', justifyContent: 'flex-end', marginTop: '8px' }}>
            <Button
              onClick={handleCancelClone}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              ÂèñÊ∂à
            </Button>
            <Button
              type="primary"
              htmlType="submit"
              loading={cloneState.isCloning}
              disabled={cloneState.isCloning}
              style={{ fontSize: '12px', height: '28px', padding: '0 12px' }}
            >
              {cloneState.isCloning ? 'ÂÖãÈöÜ‰∏≠...' : 'ÂÖãÈöÜ'}
            </Button>
          </div>
        </Form>
      </Modal>
    </Layout>
  );
}
